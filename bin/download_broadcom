#!/usr/bin/env bash
###
### SCRIPTNAME [ options ] - DESCRIPTION
###
###	-h | --help		display this message and exit
###	-v | --verbose		provide extra comments for verbose output
###
###	-k | --apikey		specify the API user and secret to authentication (XXXXX:YYYYY)
###
###	-t | --timerange	specify start and final times ( NNNNNNNNNNN:MMMMMMMMMMMM )
###	-n | --number		specify the number of days to compare against
###
###	-d | --dir_download	specify where the download files will be unpacked and staged
###
###	-w | --web_endpoint	specify where the script will post all of the files processed
###	-r | --remove		removes staged data after posting to a web end point
###
### Starting_Directory: BASEDIR
###
### NOTE: providing no time range will result in trying to download last N days in 1 day chunks
###

display_help () {

  scriptname=$( basename "$0" ) 
  startdir=$( ls -Ld "$PWD"  ) 
  description="A wrapper to download and stage/publish Broadcom logfiles to Sumo Logic"

  ( 
    grep -i -E '^###' | sed  's/^###//g' | \
    sed "s/SCRIPTNAME/$scriptname/g" | \
    sed "s#BASEDIR#$startdir#g"  | \
    sed "s#DESCRIPTION#$description#g" 
  ) < "${0}"
  exit 0

}

initialize_environment () {

  ${debugflag}

  PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:$PATH"
  export PATH

  umask 022

  base=$( ls -Ld "$PWD" )				&& export base

  scriptname="${0%.*}"					&& export scriptname
  scripttag=$( basename "$scriptname" )         	&& export scripttag

  cmddir=$( dirname "${scriptname}" )           	&& export cmddir
  actiondir=$( cd "$cmddir" ; pwd -P )          	&& export actiondir
  bindir=$( dirname "${actiondir}" )            	&& export bindir
  basedir=$( dirname "${bindir}" )             	 	&& export basedir

  dirdownload="${dir_download:-"/var/tmp/sumologic"}"	&& export dirdownload
  dirzipfiles="$dirdownload/zipfiles"			&& export dirzipfiles
  dirlogfiles="$dirdownload/logfiles"			&& export dirlogfiles
  dirsumodata="$dirdownload/sumodata"			&& export dirsumodata

  deletesumodata="${del_sumodata:-"no"}"		&& export deletesumodata

  webendpoint="${web_endpoint:-"undefined"}"		&& export webendpoint

  dstamp=$(date '+%Y%m%d')         			&& export dstamp
  tstamp=$(date '+%H%M%S')          			&& export tstamp
  lstamp="${dstamp}.${tstamp}"				&& export lstamp

  diractivity="$dirdownload/logs"			&& export diractivity
  sumologfile="$diractivity/logfile.${dstamp}.csv"	&& export sumologfile

  curlcmd=$( which curl )				&& export curlcmd

  daylimit="${num_days:-"7"}"				&& export daylimit
  sleeptime="${sleep_time:-"30"}"			&& export sleeptime

  oneday=86400000					&& export oneday

  timerange="${time_range:-"undefined:undefined"}"	&& export timerange
  credentials="${api_key:-"undefined:undefined"}"	&& export credentials

  PATH="/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin:$PATH"
  export PATH

  [[ ${BASH_VERSION%%.*} -ge 4 ]] || {
    complain_and_exit 1 "script requires bash 4 or higher to run"
  }

  mkdir -p "${dirdownload}" "${dirzipfiles}" "${dirlogfiles}" "${diractivity}" "${dirsumodata}"
  touch "${sumologfile}" 

}

complain_and_exit () {

  exitmessage="$2"
  exitstatus="$1"
  echo "ERROR: ${exitmessage}"
  exit "${exitstatus}"

}

initialize_credentials () {

  ${debugflag}

  [[ $credentials = "undefined:undefined" ]] && {
    complain_and_exit 6 "no supplied credentials"
  }

  username=$( echo "$credentials" | awk -F: '{print$1}' )
  authuser="X-APIUsername: $username"
  export authuser

  password=$( echo "$credentials" | awk -F: '{print$2}' )
  authpass="X-APIPassword: $password"
  export authpass

}

process_gzipfile () {

  my_gzipfile=$1
  gunzip "${my_gzipfile}" > /dev/null

  my_logfile="${my_gzipfile%*.gz}"
  my_logname=$( basename "${my_logfile}" )
  my_sumofile="${dirsumodata}/${my_logname}"

  my_logentries=$( grep -c -i -E "${my_logname}" "$diractivity/*.*" 2>/dev/null | xargs )
  [[ ${my_logentries} -lt 1 ]] && {
    mv -f "${my_logfile}" "${my_sumofile}"
    update_logfile_entry "${my_sumofile}"
    [[ $webendpoint != "undefined" ]] && {
      "${curlcmd}" -s -F data=\@"${my_sumofile}" "${webendpoint}"
      [ "$deletesumodata" = "yes" ] && {
        rm -f "${my_sumofile}"
      }
    }
  }
  [[ $my_logentries -ge 1 ]] && {
    rm -f "${my_logfile}"
  }
}

unpack_zipfiles () {
  target_zip=$1
  unzip "${target_zip}" -d "${dirlogfiles}" > /dev/null 2>&1
  rm -f "${target_zip}"
}

update_logfile_entry () {

  target_file=$1
  my_log_file=$( basename "${target_file}" )
  my_log_size=$( du -sk "${target_file}" 2>/dev/null | awk '{print$1}' | xargs )
  my_log_time=$(( $( date +%s ) * 1000 ))
  touch "${sumologfile}" &&  printf "%s,%s,%s\n" "$my_log_time" "$my_log_size" "$my_log_file" >> "${sumologfile}"

}

uncompress_logfiles () {
  gzipfiles=$( ls -1d $dirlogfiles/*.gz 2>/dev/null )
  for gzipfile in ${gzipfiles}
    do
      process_gzipfile "${gzipfile}"
    done
}

download_and_unpack () {

  ${debugflag}

  urlbase='https://portal.threatpulse.com/reportpod/logs/sync?'

  startdate=$1
  finaldate=$2

  urlopts="startDate=${startdate}&endDate=${finaldate}&token=none"

  zipdownload="$dirzipfiles/broadcom_wss_events.$startdate.$finaldate.zip"

  [ -f "${zipdownload}" ] || {
    "${curlcmd}" -s -H "${authuser}" -H "${authpass}" "${urlbase}${urlopts}" -o "${zipdownload}"
    exitstatus=$?
    [[ $exitstatus -eq 0 ]] && {
       unpack_zipfiles "${zipdownload}"
       uncompress_logfiles
    }
    [[ $exitstatus -eq 0 ]] || {
      rm -f "${zipdownload}"
    }
  }
}

initialize_time_ranges () {

  ${debugflag}

  [[ $timerange = "undefined:undefined" ]] || {
    startdate=$( echo "${time_range}" | awk -F: '{print$1}' )
    finaldate=$( echo "${time_range}" | awk -F: '{print$2}' )
    download_and_unpack "$startdate" "$finaldate"
  }

  [[ $timerange = "undefined:undefined" ]] && {
    finaldate=$(( $( date +%s ) * 1000 ))
    startdate=$(( $finaldate - $oneday ))
    for ((counter = 1 ; counter < $daylimit ; counter++)); 
    do
      finaldate=$(( $finaldate - $oneday * $counter ))
      startdate=$(( $startdate - $oneday * $counter ))
      download_and_unpack $startdate $finaldate
      sleep "$sleeptime"
    done
  }

}

main_logic () { 

  initialize_environment
  initialize_credentials
  initialize_time_ranges

}
  
while getopts "hvk:t:n:d:w:r" options;
do
  case "${options}" in
    h) display_help ; exit 0 ;;
    v) debugflag='set -x'	; export debugflag ;;
    k) api_key=$OPTARG		; export api_key ;;
    t) time_range=$OPTARG	; export time_range ;;
    n) num_days=$OPTARG		; export num_days ;;
    d) dir_download=$OPTARG	; export dir_download ;;
    w) web_endpoint=$OPTARG	; export web_endpoint ;;
    r) del_sumodata="yes"	; export del_sumodata ;;
    *) display_help ; exit 0 ;;
  esac
done
shift $((OPTIND-1))

main_logic
